#lang sicp

(define (test n)
  (let ((start-time (runtime)))
    (define (test-iter n times)
      (cond ((> times 0)
             (count-primes n 3)
             (test-iter n (- times 1)))))
    (test-iter n 1000)
      (- (runtime) start-time)))

(define (count-primes n count)
  (cond ((= count 0) )
        ((prime? n)
;;         (display n)
;;         (newline)
         (count-primes (+ n 1) (- count 1)))
        (else (count-primes (+ n 1) count))))
(define (smallest-divisor n)
  (find-divisor n 2))
(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (+ test-divisor 1)))))
(define (divides? a b)
  (= (remainder b a) 0))
(define (square x)
  (* x x))
(define (prime? n)
  (= n (smallest-divisor n)))